[
  {
    "inputs": [
      {
        "components": [
          {
            "internalType": "address",
            "name": "facetAddress",
            "type": "address"
          },
          {
            "internalType": "enum FacetCutAction",
            "name": "action",
            "type": "uint8"
          },
          {
            "internalType": "bytes4[]",
            "name": "functionSelectors",
            "type": "bytes4[]"
          }
        ],
        "internalType": "struct FacetCut[]",
        "name": "_diamondCut",
        "type": "tuple[]"
      },
      {
        "components": [
          { "internalType": "address", "name": "owner", "type": "address" },
          { "internalType": "address", "name": "init", "type": "address" },
          { "internalType": "bytes", "name": "initData", "type": "bytes" }
        ],
        "internalType": "struct DiamondArgs",
        "name": "_args",
        "type": "tuple"
      }
    ],
    "stateMutability": "payable",
    "type": "constructor"
  },
  {
    "inputs": [
      { "internalType": "bytes4", "name": "selector", "type": "bytes4" }
    ],
    "name": "CannotAddFunctionToDiamondThatAlreadyExists",
    "type": "error"
  },
  {
    "inputs": [
      { "internalType": "bytes4[]", "name": "selectors", "type": "bytes4[]" }
    ],
    "name": "CannotAddSelectorsToZeroAddress",
    "type": "error"
  },
  {
    "inputs": [
      { "internalType": "bytes4", "name": "selector", "type": "bytes4" }
    ],
    "name": "CannotRemoveFunctionThatDoesNotExist",
    "type": "error"
  },
  {
    "inputs": [
      { "internalType": "bytes4", "name": "selector", "type": "bytes4" }
    ],
    "name": "CannotRemoveImmutableFunction",
    "type": "error"
  },
  {
    "inputs": [
      { "internalType": "bytes4", "name": "selector", "type": "bytes4" }
    ],
    "name": "CannotReplaceFunctionWithTheSameFunctionFromTheSameFacet",
    "type": "error"
  },
  {
    "inputs": [
      { "internalType": "bytes4", "name": "functionSelector", "type": "bytes4" }
    ],
    "name": "FunctionDoesNotExist",
    "type": "error"
  },
  {
    "inputs": [{ "internalType": "uint8", "name": "action", "type": "uint8" }],
    "name": "IncorrectFacetCutAction",
    "type": "error"
  },
  {
    "inputs": [
      { "internalType": "address", "name": "initAddress", "type": "address" },
      { "internalType": "bytes", "name": "data", "type": "bytes" }
    ],
    "name": "InitializationFunctionReverted",
    "type": "error"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "contractAddress",
        "type": "address"
      }
    ],
    "name": "NoBytecodeAtAddress",
    "type": "error"
  },
  { "inputs": [], "name": "NoFacetsInDiamondCut", "type": "error" },
  { "inputs": [], "name": "NoSelectorsGivenToAdd", "type": "error" },
  {
    "inputs": [
      { "internalType": "address", "name": "facetAddress", "type": "address" }
    ],
    "name": "NoSelectorsProvidedForFacetForCut",
    "type": "error"
  },
  {
    "inputs": [
      { "internalType": "address", "name": "facetAddress", "type": "address" }
    ],
    "name": "RemoveFacetAddressMustBeZeroAddress",
    "type": "error"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "components": [
          {
            "internalType": "address",
            "name": "facetAddress",
            "type": "address"
          },
          {
            "internalType": "enum FacetCutAction",
            "name": "action",
            "type": "uint8"
          },
          {
            "internalType": "bytes4[]",
            "name": "functionSelectors",
            "type": "bytes4[]"
          }
        ],
        "indexed": false,
        "internalType": "struct FacetCut[]",
        "name": "diamondCut",
        "type": "tuple[]"
      },
      {
        "indexed": false,
        "internalType": "address",
        "name": "init",
        "type": "address"
      },
      {
        "indexed": false,
        "internalType": "bytes",
        "name": "data",
        "type": "bytes"
      }
    ],
    "name": "DiamondCut",
    "type": "event"
  },
  { "stateMutability": "payable", "type": "fallback" },
  { "stateMutability": "payable", "type": "receive" }
]
